from database.db_funcs import DataBase
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from callbacks.store_callbacks import ITEM_CB, BUY_NO_COLORS_SIZES_CB, BUY_COLORS_SIZES_CB, \
    BUY_CONFIRM_COLORS_SIZES_CB, BUY_CONFIRM_NO_COLORS_SIZES_CB

STORE_CATEGORIES_WITH_TUC_TEMPLATE = "–°–µ–π—á–∞—Å —É —Ç–µ–±—è <b>{}i</b>.\n\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –º–Ω–∏–º—ã–µ –µ–¥–∏–Ω–∏—Ü—ã, " \
                                     "—É—á–∞—Å—Ç–≤—É–π –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –Ω–µ–¥–µ–ª–∏ –º–∞—Ç–º–µ—Ö–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–π –æ–≥—Ä–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º —Å–≤–æ–π –∫–æ–¥."
STORE_CATEGORIES_NO_TUC_TEMPLATE = "–°–µ–π—á–∞—Å —É —Ç–µ–±—è <b>{}i</b>.\n\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –º–Ω–∏–º—ã–µ –µ–¥–∏–Ω–∏—Ü—ã, " \
                                   "—É—á–∞—Å—Ç–≤—É–π –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –Ω–µ–¥–µ–ª–∏ –º–∞—Ç–º–µ—Ö–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–π –æ–≥—Ä–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º —Å–≤–æ–π –∫–æ–¥.\n\n" \
                                   "–¶–µ–Ω—ã –Ω–∞ –º–µ—Ä—á –º–µ–Ω—å—à–µ –¥–ª—è –æ–¥–Ω–æ—á–ª–µ–Ω–æ–≤ –ü—Ä–æ—Ñ–∫–æ–º–∞.\n" \
                                   "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ –ø—Ä–æ—Ñ–∫–æ–º " \
                                   "–º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ."

THING_NOT_FOUND_TEXT = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à—ë–ª —ç—Ç—É –≤–µ—â—å —É —Å–µ–±—è –Ω–∞ —Å–∫–ª–∞–¥–µ."
THING_HID = "–Ø —Ç–µ–±–µ –Ω–µ –ø–æ–∫–∞–∂—É —ç—Ç—É –≤–µ—â—å."

THING_NOT_ENOUGH_MONEY_TEXT = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–≤–æ–∏—Ö –º–Ω–∏–º—ã—Ö –µ–¥–∏–Ω–∏—Ü –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞."
THING_HAS_BEEN_SOLD_TEXT = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –Ω–µ —É—Å–ø–µ–ª –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –≤–µ—â—å."
TRANSACTION_ERROR = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, —Ç—ã —Å–º–æ–∂–µ—à—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –≤–µ—â—å –ø–æ–∑–∂–µ."

NO_RETURN_DISCLAIMER = "–£—á—Ç–∏, —á—Ç–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ä—á —É–∂–µ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è —Ä–∞–∑–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å ü§≠\n\n" + \
    "–í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É –∏–ª–∏ –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º –≤ –º–∞–≥–∞–∑–∏–Ω–µ"


def get_size_color_thing_has_bought_text(db: DataBase, colors_sizes_id):
    stuff_id, size, color = db.get_stuff_sizes_colors_texts_info(colors_sizes_id,
                                                                 "stuff_id, size, color")
    name, = db.get_stuff_info(stuff_id, "name")
    if not color:
        return f"{name} {size} - —Ö–æ—Ä–æ—à–∏–π –≤—ã–±–æ—Ä. –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Ç–µ–±—è —Å –ø–æ–∫—É–ø–∫–æ–π."
    elif not size:
        return f"{name} {color} - —Ö–æ—Ä–æ—à–∏–π –≤—ã–±–æ—Ä. –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Ç–µ–±—è —Å –ø–æ–∫—É–ø–∫–æ–π."
    return f"{name} {size} {color} - —Ö–æ—Ä–æ—à–∏–π –≤—ã–±–æ—Ä. –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Ç–µ–±—è —Å –ø–æ–∫—É–ø–∫–æ–π."


def get_no_size_color_thing_has_bought_text(db: DataBase, stuff_id):
    name, = db.get_stuff_info(stuff_id, "name")
    return f"{name} - —Ö–æ—Ä–æ—à–∏–π –≤—ã–±–æ—Ä. –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Ç–µ–±—è —Å –ø–æ–∫—É–ø–∫–æ–π."


def get_thing_no_color_size_confirmation_text_markup(db: DataBase, stuff_id, tuc):
    data = db.get_stuff_info(stuff_id, "name, not_tuc_price, tuc_price, count, show")
    if not data:
        text = THING_NOT_FOUND_TEXT
        return text, None
    name, not_tuc_price, tuc_price, count, show = data
    if not show:
        text = THING_HID
        return text, None
    if tuc:
        price = tuc_price
    else:
        price = not_tuc_price
    text = f"–¢—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—á–µ—à—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç {name} –∑–∞ {price}i?\n\n" + NO_RETURN_DISCLAIMER
    markup = InlineKeyboardMarkup().add(
        InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                             callback_data=BUY_CONFIRM_NO_COLORS_SIZES_CB.new(
                                 stuff_id=stuff_id))
    )
    return text, markup


def get_thing_color_size_confirmation_text_markup(db: DataBase, colors_sizes_id, tuc):
    data = db.get_stuff_sizes_colors(colors_sizes_id, "stuff_id, size, color")
    stuff_id, size, color = data
    data = db.get_stuff_info(stuff_id, "name, tuc_price, not_tuc_price")
    name, tuc_price, not_tuc_price = data
    if tuc:
        price = tuc_price
    else:
        price = not_tuc_price
    text = f"–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç {name} "
    if size:
        text += f"—Ä–∞–∑–º–µ—Ä–∞ {size} "
    if color:
        text += f"—Ü–≤–µ—Ç–∞ {color}"
    text += f"–∑–∞ {price}i?\n\n" + NO_RETURN_DISCLAIMER
    markup = InlineKeyboardMarkup().add(
        InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                             callback_data=BUY_CONFIRM_COLORS_SIZES_CB.new(
                                 colors_sizes_id=colors_sizes_id)
                             )
    )
    return text, markup


def get_thing_color_size_text_markup(db: DataBase, stuff_id, tuc, tg_id):
    data = db.get_stuff_info(stuff_id, "name, description, not_tuc_price, tuc_price, show")
    if not data:
        text = THING_NOT_FOUND_TEXT
        return text, None
    name, description, not_tuc_price, tuc_price, show = data
    if not show:
        text = THING_HID
        return text, None
    combinations = db.get_all_color_size_combinations(stuff_id)
    markup = InlineKeyboardMarkup()
    count = db.get_stuff_count_num_by_stuff_id(stuff_id)
    if tuc:
        price = tuc_price
    else:
        price = not_tuc_price

    if not description:
        description = ""
    else:
        description += "\n\n"
    text = f"<b>{name}</b>\n\n{description}" \
           f"–û—Å—Ç–∞–ª–æ—Å—å: {count} —à—Ç.\n–¶–µ–Ω–∞: {price}i\n\n"
    if combinations:
        colors_sizes_id, color, size, count = combinations[0]
        if color is not None and size is None:
            text += f"–¶–≤–µ—Ç–∞:\n"
        elif color is None and size is not None:
            text += "<b>–†–∞–∑–º–µ—Ä—ã:</b>\n"
        elif color is not None and size is not None:
            text += "<b>–í–∞—Ä–∏–∞–Ω—Ç—ã:</b>\n"

    for colors_sizes_id, color, size, count in combinations:
        button_text = None
        if color is not None and size is None:
            text += f"{color} - {count} —à—Ç.\n"
            button_text = color
        elif color is None and size is not None:
            text += f"{size} - {count} —à—Ç.\n"
            button_text = size
        elif color is not None and size is not None:
            text += f"{color} {size} - —à—Ç.\n"
            button_text = f"{color} {size}"
        else:
            print("–í stuff_size_colors –µ—Å—Ç—å (size, color) = (NULL, NULL)")
        if button_text:
            markup.insert(InlineKeyboardButton(
                button_text,
                callback_data=BUY_COLORS_SIZES_CB.new(colors_sizes_id=colors_sizes_id))
            )
    booked = db.how_many_stuff_booked(tg_id, stuff_id)
    if booked:
        text += f"\n–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ —Ç–æ–±–æ–π: {booked} —à—Ç."
    return text, markup


def get_thing_no_color_size_text_markup(db: DataBase, stuff_id, tuc, tg_id):
    data = db.get_stuff_info(stuff_id, "name, description, not_tuc_price, tuc_price, count, show")
    if not data:
        text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–µ—â—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
        return text, None
    name, description, not_tuc_price, tuc_price, count, show = data
    if not show:
        text = "–í–µ—â—å —Å–∫—Ä—ã—Ç–∞"
        return text, None
    if tuc:
        price = tuc_price
    else:
        price = not_tuc_price
    if not description:
        description = ""
    else:
        description += "\n\n"
    text = f"<b>{name}</b>\n\n{description}" \
           f"–û—Å—Ç–∞–ª–æ—Å—å: {count} —à—Ç.\n–¶–µ–Ω–∞: {price}i"
    booked = db.how_many_stuff_booked(tg_id, stuff_id)
    if booked:
        text += f"\n–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ —Ç–æ–±–æ–π: {booked} —à—Ç."
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=BUY_NO_COLORS_SIZES_CB.new(stuff_id=stuff_id)))
    return text, markup


def get_category_list_text_markup(db: DataBase, category_id, tg_id):
    description = db.get_category_description(category_id)
    stuff = db.get_stuff_by_category_id(category_id, "id, name, count, show, not_tuc_price, tuc_price")
    tuc = db.in_tuc(tg_id)
    if not stuff:
        text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø—É—Å—Ç–∞."
        return text, None
    markup = InlineKeyboardMarkup(row_width=2)
    text = description + "\n\n"
    for i, data in enumerate(stuff):
        stuff_id, name, count, show, not_in_tuc_price, tuc_price = data
        if count is None:
            with_colors_sizes = True
            # –ü–æ–∏—Å–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ —Å —Ä–∞—Å–ø–µ—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ —Ü–≤–µ—Ç–∞–º –∏ —Ä–∞–∑–º–µ—Ä–∞–º
            count = db.get_stuff_count_num_by_stuff_id(stuff_id)
        else:
            with_colors_sizes = False
        indent = " " * (len(str(i + 1)) + 3)
        text += f"{i + 1}. <i>{name}</i>"
        price_output = False
        if with_colors_sizes:
            if show:
                colors = db.get_all_colors_by_stuff_id(stuff_id)
                if colors:
                    text += f" ‚Äî {tuc_price if tuc else not_in_tuc_price}i"
                    price_output = True
                    text += f"\n{indent}(" + ", ".join([color for color_sizes_id, color in colors]) + ")"
                sizes = db.get_all_sizes_by_stuff_id(stuff_id)
                if sizes:
                    text += f"  (" + ", ".join([size for color_sizes_id, size in sizes]) + ")"
        if not price_output:
            text += f" ‚Äî {tuc_price if tuc else not_in_tuc_price}i"
        text += f"\n{indent}–û—Å—Ç–∞–ª–æ—Å—å {count} —à—Ç.\n"
        booked = db.how_many_stuff_booked(tg_id, stuff_id)
        if booked:
            text += f"{indent}–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ —Ç–æ–±–æ–π: {booked} —à—Ç.\n"
        text += "\n"
        markup.insert(InlineKeyboardButton(name, callback_data=ITEM_CB.new(stuff_id=stuff_id)))
    return text, markup
